digraph CFG {
  node [shape=box];
  B0 [label="B0: 3: #include <stdio.h>\n4: #include <string.h>\n5: #include <ctype.h>\n7: #define MAX_LINE 1024\n8: #define MAX_WORDS 200\n9: #define MAX_WORD 64\n11: int is_vowel(char c) {\n12: char d = (char)tolower((unsigned char)c);\n13: return d=='a'||d=='e'||d=='i'||d=='o'||d=='u';"];
  B1 [label="B1: 16: int is_pal(const char *s) {\n17: int i = 0, j = (int)strlen(s) - 1;"];
  B2 [label="B2: 18: while (i < j) {"];
  B3 [label="B3: 19: if (s[i] != s[j]) return 0;\n20: i++; j--;"];
  B4 [label="B4: 22: return 1;"];
  B5 [label="B5: 25: int main(void) {\n26: char line[MAX_LINE];\n27: char words[MAX_WORDS][MAX_WORD];\n28: int wcount = 0;\n30: printf(\"Enter a line (<= 1023 chars):\n\");"];
  B6 [label="B6: 31: if (!fgets(line, sizeof(line), stdin)) {\n32: return 0;"];
  B7 [label="B7: 36: int i = 0;"];
  B8 [label="B8: 37: while (line[i] != '\0' && wcount < MAX_WORDS) {"];
  B9 [label="B9: 38: while (line[i] && !isalnum((unsigned char)line[i])) i++;"];
  B10 [label="B10: 39: if (!line[i]) break;\n40: int k = 0;"];
  B11 [label="B11: 41: while (line[i] && isalnum((unsigned char)line[i]) && k < MAX_WORD-1) {\n42: words[wcount][k++] = (char)tolower((unsigned char)line[i]);\n43: i++;"];
  B12 [label="B12: 45: words[wcount][k] = '\0';"];
  B13 [label="B13: 46: if (k > 0) wcount++;"];
  B14 [label="B14: 47: while (line[i] && isalnum((unsigned char)line[i])) i++;"];
  B15 [label="B15: 50: int letters = 0, digits = 0, spaces = 0, vowels = 0, consonants = 0;"];
  B16 [label="B16: 51: for (i = 0; line[i]; i++) {\n52: unsigned char c = (unsigned char)line[i];"];
  B17 [label="B17: 53: if (isalpha(c)) {\n54: letters++;"];
  B18 [label="B18: 55: if (is_vowel(c)) vowels++;"];
  B19 [label="B19: 56: else consonants++;\n57: } else if (isdigit(c)) {\n58: digits++;\n59: } else if (isspace(c)) {\n60: spaces++;"];
  B20 [label="B20: BASIC"];
  B21 [label="B21: 65: int freq[26] = {0};"];
  B22 [label="B22: 66: for (i = 0; i < wcount; i++) {\n67: char c = words[i][0];"];
  B23 [label="B23: 68: if (c >= 'a' && c <= 'z') {\n69: freq[c - 'a'] = freq[c - 'a'] + 1;"];
  B24 [label="B24: BASIC"];
  B25 [label="B25: 74: int pal_count = 0, max_len = 0, max_idx = -1;"];
  B26 [label="B26: 75: for (i = 0; i < wcount; i++) {"];
  B27 [label="B27: 76: if (is_pal(words[i])) pal_count++;\n77: int L = (int)strlen(words[i]);"];
  B28 [label="B28: 78: if (L > max_len) {\n79: max_len = L;\n80: max_idx = i;"];
  B29 [label="B29: BASIC"];
  B30 [label="B30: 84: printf(\"Words: %d | Letters: %d | Digits: %d | Spaces: %d\n\", wcount, letters, digits, spaces);\n85: printf(\"Vowels: %d | Consonants: %d | Palindromes: %d\n\", vowels, consonants, pal_count);"];
  B31 [label="B31: 86: if (max_idx >= 0) {\n87: printf(\"Longest word: %s (%d)\n\", words[max_idx], max_len);"];
  B32 [label="B32: 91: printf(\"\nHistogram (first letter of word):\n\");"];
  B33 [label="B33: 92: for (i = 0; i < 26; i++) {"];
  B34 [label="B34: 93: if (freq[i] > 0) {\n94: printf(\"%c: %d\n\", 'a' + i, freq[i]);"];
  B35 [label="B35: BASIC"];
  B36 [label="B36: 99: int minL;\n100: printf(\"\nEnter a minimum length to list words: \");"];
  B37 [label="B37: 101: if (scanf(\"%d\", &minL) == 1 && minL > 0) {\n102: int printed = 0;"];
  B38 [label="B38: 103: for (i = 0; i < wcount; i++) {"];
  B39 [label="B39: 104: if ((int)strlen(words[i]) >= minL) {\n105: printf(\"%s\n\", words[i]);\n106: printed++;"];
  B40 [label="B40: BASIC"];
  B41 [label="B41: BASIC"];
  B42 [label="B42: 109: if (printed == 0) {\n110: printf(\"No words with length >= %d\n\", minL);"];
  B43 [label="B43: BASIC"];
  B44 [label="B44: 113: return 0;"];
  B45 [label="B45: BASIC"];
  B0 -> B1 [label="return"];
  B1 -> B2;
  B2 -> B3;
  B3 -> B4 [label="fallthrough"];
  B3 -> B4;
  B4 -> B1 [label="return"];
  B1 -> B2 [label="back"];
  B2 -> B5 [label="exit"];
  B5 -> B6;
  B6 -> B1 [label="return"];
  B6 -> B7 [label="fallthrough"];
  B1 -> B7;
  B7 -> B8;
  B8 -> B9;
  B9 -> B10;
  B10 -> B11;
  B11 -> B11 [label="back"];
  B11 -> B12 [label="exit"];
  B12 -> B13;
  B13 -> B14;
  B14 -> B14 [label="back"];
  B14 -> B15 [label="exit"];
  B15 -> B16;
  B16 -> B17;
  B17 -> B18;
  B18 -> B19 [label="false"];
  B18 -> B20 [label="fallthrough"];
  B19 -> B20;
  B17 -> B21 [label="fallthrough"];
  B20 -> B21;
  B21 -> B22;
  B22 -> B23;
  B23 -> B24 [label="fallthrough"];
  B23 -> B24;
  B24 -> B22 [label="back"];
  B22 -> B25 [label="exit"];
  B25 -> B26;
  B26 -> B27;
  B27 -> B28;
  B28 -> B29 [label="fallthrough"];
  B28 -> B29;
  B27 -> B30 [label="fallthrough"];
  B29 -> B30;
  B30 -> B31;
  B31 -> B32 [label="fallthrough"];
  B31 -> B32;
  B32 -> B33;
  B33 -> B34;
  B34 -> B35 [label="fallthrough"];
  B34 -> B35;
  B35 -> B33 [label="back"];
  B33 -> B36 [label="exit"];
  B36 -> B37;
  B37 -> B38;
  B38 -> B39;
  B39 -> B40 [label="fallthrough"];
  B39 -> B40;
  B40 -> B38 [label="back"];
  B38 -> B41 [label="exit"];
  B41 -> B42;
  B42 -> B43 [label="fallthrough"];
  B42 -> B43;
  B37 -> B44 [label="fallthrough"];
  B43 -> B44;
  B44 -> B1 [label="return"];
  B1 -> B26 [label="back"];
  B26 -> B45 [label="exit"];
  B45 -> B1 [label="fallthrough"];
}