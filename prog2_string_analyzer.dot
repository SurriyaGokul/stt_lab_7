digraph CFG {
  node [shape=box];
  B0 [label="B0: 3: #include <stdio.h>\n4: #include <string.h>\n5: #include <ctype.h>\n7: #define MAX_LINE 1024\n8: #define MAX_WORDS 200\n9: #define MAX_WORD 64\n11: int is_vowel(char c) {\n12: char d = (char)tolower((unsigned char)c);\n13: return d=='a'||d=='e'||d=='i'||d=='o'||d=='u';"];
  B1 [label="B1: 16: int is_pal(const char *s) {\n17: int i = 0, j = (int)strlen(s) - 1;"];
  B2 [label="B2: 18: while (i < j) {"];
  B3 [label="B3: BASIC"];
  B4 [label="B4: 19: if (s[i] != s[j]) return 0;\n20: i++; j--;"];
  B5 [label="B5: 22: return 1;"];
  B6 [label="B6: 25: int main(void) {\n26: char line[MAX_LINE];\n27: char words[MAX_WORDS][MAX_WORD];\n28: int wcount = 0;\n30: printf(\"Enter a line (<= 1023 chars):\n\");"];
  B7 [label="B7: 31: if (!fgets(line, sizeof(line), stdin)) {"];
  B8 [label="B8: 32: return 0;"];
  B9 [label="B9: 36: int i = 0;"];
  B10 [label="B10: 37: while (line[i] != '\0' && wcount < MAX_WORDS) {"];
  B11 [label="B11: BASIC"];
  B12 [label="B12: 38: while (line[i] && !isalnum((unsigned char)line[i])) i++;"];
  B13 [label="B13: 39: if (!line[i]) break;\n40: int k = 0;"];
  B14 [label="B14: 41: while (line[i] && isalnum((unsigned char)line[i]) && k < MAX_WORD-1) {"];
  B15 [label="B15: 42: words[wcount][k++] = (char)tolower((unsigned char)line[i]);\n43: i++;"];
  B16 [label="B16: 45: words[wcount][k] = '\0';"];
  B17 [label="B17: 46: if (k > 0) wcount++;"];
  B18 [label="B18: 47: while (line[i] && isalnum((unsigned char)line[i])) i++;"];
  B19 [label="B19: 50: int letters = 0, digits = 0, spaces = 0, vowels = 0, consonants = 0;"];
  B20 [label="B20: 51: for (i = 0; line[i]; i++) {"];
  B21 [label="B21: 52: unsigned char c = (unsigned char)line[i];"];
  B22 [label="B22: 53: if (isalpha(c)) {"];
  B23 [label="B23: 54: letters++;"];
  B24 [label="B24: 55: if (is_vowel(c)) vowels++;"];
  B25 [label="B25: 56: else consonants++;\n57: } else if (isdigit(c)) {\n58: digits++;\n59: } else if (isspace(c)) {\n60: spaces++;"];
  B26 [label="B26: BASIC"];
  B27 [label="B27: 65: int freq[26] = {0};"];
  B28 [label="B28: 66: for (i = 0; i < wcount; i++) {"];
  B29 [label="B29: 67: char c = words[i][0];"];
  B30 [label="B30: 68: if (c >= 'a' && c <= 'z') {"];
  B31 [label="B31: 69: freq[c - 'a'] = freq[c - 'a'] + 1;"];
  B32 [label="B32: BASIC"];
  B33 [label="B33: 74: int pal_count = 0, max_len = 0, max_idx = -1;"];
  B34 [label="B34: 75: for (i = 0; i < wcount; i++) {"];
  B35 [label="B35: BASIC"];
  B36 [label="B36: 76: if (is_pal(words[i])) pal_count++;\n77: int L = (int)strlen(words[i]);"];
  B37 [label="B37: 78: if (L > max_len) {"];
  B38 [label="B38: 79: max_len = L;\n80: max_idx = i;"];
  B39 [label="B39: BASIC"];
  B40 [label="B40: 84: printf(\"Words: %d | Letters: %d | Digits: %d | Spaces: %d\n\", wcount, letters, digits, spaces);\n85: printf(\"Vowels: %d | Consonants: %d | Palindromes: %d\n\", vowels, consonants, pal_count);"];
  B41 [label="B41: 86: if (max_idx >= 0) {"];
  B42 [label="B42: 87: printf(\"Longest word: %s (%d)\n\", words[max_idx], max_len);"];
  B43 [label="B43: 91: printf(\"\nHistogram (first letter of word):\n\");"];
  B44 [label="B44: 92: for (i = 0; i < 26; i++) {"];
  B45 [label="B45: BASIC"];
  B46 [label="B46: 93: if (freq[i] > 0) {"];
  B47 [label="B47: 94: printf(\"%c: %d\n\", 'a' + i, freq[i]);"];
  B48 [label="B48: BASIC"];
  B49 [label="B49: 99: int minL;\n100: printf(\"\nEnter a minimum length to list words: \");"];
  B50 [label="B50: 101: if (scanf(\"%d\", &minL) == 1 && minL > 0) {"];
  B51 [label="B51: 102: int printed = 0;"];
  B52 [label="B52: 103: for (i = 0; i < wcount; i++) {"];
  B53 [label="B53: BASIC"];
  B54 [label="B54: 104: if ((int)strlen(words[i]) >= minL) {"];
  B55 [label="B55: 105: printf(\"%s\n\", words[i]);\n106: printed++;"];
  B56 [label="B56: BASIC"];
  B57 [label="B57: BASIC"];
  B58 [label="B58: 109: if (printed == 0) {"];
  B59 [label="B59: 110: printf(\"No words with length >= %d\n\", minL);"];
  B60 [label="B60: BASIC"];
  B61 [label="B61: 113: return 0;"];
  B62 [label="B62: BASIC"];
  B0 -> B1 [label="return"];
  B1 -> B2;
  B2 -> B3 [label="body"];
  B3 -> B4;
  B4 -> B5;
  B4 -> B5 [label="false"];
  B5 -> B1 [label="return"];
  B1 -> B2 [label="back"];
  B2 -> B6 [label="false"];
  B6 -> B7;
  B7 -> B8 [label="true"];
  B8 -> B1 [label="return"];
  B1 -> B9;
  B7 -> B9 [label="false"];
  B9 -> B10;
  B10 -> B11 [label="body"];
  B11 -> B12;
  B12 -> B13;
  B13 -> B14;
  B14 -> B15 [label="body"];
  B15 -> B14 [label="back"];
  B14 -> B16 [label="false"];
  B16 -> B17;
  B17 -> B18;
  B18 -> B18 [label="back"];
  B18 -> B19 [label="false"];
  B19 -> B20;
  B20 -> B21 [label="body"];
  B21 -> B22;
  B22 -> B23 [label="true"];
  B23 -> B24;
  B24 -> B25 [label="false"];
  B25 -> B26;
  B26 -> B27;
  B22 -> B27 [label="false"];
  B27 -> B28;
  B28 -> B29 [label="body"];
  B29 -> B30;
  B30 -> B31 [label="true"];
  B31 -> B32;
  B30 -> B32 [label="false"];
  B32 -> B28 [label="back"];
  B28 -> B33 [label="false"];
  B33 -> B34;
  B34 -> B35 [label="body"];
  B35 -> B36;
  B36 -> B37;
  B37 -> B38 [label="true"];
  B38 -> B39;
  B37 -> B39 [label="false"];
  B39 -> B40;
  B36 -> B40 [label="false"];
  B40 -> B41;
  B41 -> B42 [label="true"];
  B42 -> B43;
  B41 -> B43 [label="false"];
  B43 -> B44;
  B44 -> B45 [label="body"];
  B45 -> B46;
  B46 -> B47 [label="true"];
  B47 -> B48;
  B46 -> B48 [label="false"];
  B48 -> B44 [label="back"];
  B44 -> B49 [label="false"];
  B49 -> B50;
  B50 -> B51 [label="true"];
  B51 -> B52;
  B52 -> B53 [label="body"];
  B53 -> B54;
  B54 -> B55 [label="true"];
  B55 -> B56;
  B54 -> B56 [label="false"];
  B56 -> B52 [label="back"];
  B52 -> B57 [label="false"];
  B57 -> B58;
  B58 -> B59 [label="true"];
  B59 -> B60;
  B58 -> B60 [label="false"];
  B60 -> B61;
  B50 -> B61 [label="false"];
  B61 -> B1 [label="return"];
  B1 -> B34 [label="back"];
  B34 -> B62 [label="false"];
  B62 -> B1;
}