digraph CFG {
  node [shape=box];
  B0 [label="B0: 3: #include <stdio.h>\n4: #include <string.h>\n6: #define MAX_STUDENTS 50\n7: #define MAX_NAME 32\n9: typedef struct {\n10: char name[MAX_NAME];\n11: int m1, m2, m3;\n12: float avg;\n13: char grade;\n16: void compute_avg_and_grade(Student *s) {\n17: s->avg = (s->m1 + s->m2 + s->m3) / 3.0f;"];
  B1 [label="B1: 18: if (s->avg >= 90.0f) {\n19: s->grade = 'A';\n20: } else if (s->avg >= 80.0f) {\n21: s->grade = 'B';\n22: } else if (s->avg >= 70.0f) {\n23: s->grade = 'C';\n24: } else if (s->avg >= 60.0f) {\n25: s->grade = 'D';\n26: } else {\n27: s->grade = 'F';"];
  B2 [label="B2: 31: void curve_class(Student arr[], int n, float target_avg) {\n34: int i;"];
  B3 [label="B3: 35: for (i = 0; i < n; i++) {\n36: float delta = target_avg - arr[i].avg;"];
  B4 [label="B4: 37: if (delta > 0.0f) {\n38: int bump = (delta > 10.0f) ? 10 : (int)(delta + 0.5f);\n40: int add1 = bump / 3;\n41: int add2 = bump / 3;\n42: int add3 = bump - add1 - add2;\n43: arr[i].m1 = arr[i].m1 + add1;\n44: arr[i].m2 = arr[i].m2 + add2;\n45: arr[i].m3 = arr[i].m3 + add3;"];
  B5 [label="B5: 47: if (arr[i].m1 > 100) arr[i].m1 = 100;"];
  B6 [label="B6: 48: if (arr[i].m2 > 100) arr[i].m2 = 100;"];
  B7 [label="B7: 49: if (arr[i].m3 > 100) arr[i].m3 = 100;\n50: compute_avg_and_grade(&arr[i]);"];
  B8 [label="B8: BASIC"];
  B9 [label="B9: BASIC"];
  B10 [label="B10: 55: void sort_by_avg_desc(Student arr[], int n) {\n57: int swapped = 1;"];
  B11 [label="B11: 58: while (swapped) {\n59: swapped = 0;"];
  B12 [label="B12: 60: for (int i = 0; i < n - 1; i++) {"];
  B13 [label="B13: 61: if (arr[i].avg < arr[i+1].avg) {\n62: Student tmp = arr[i];\n63: arr[i] = arr[i+1];\n64: arr[i+1] = tmp;\n65: swapped = 1;"];
  B14 [label="B14: BASIC"];
  B15 [label="B15: BASIC"];
  B16 [label="B16: BASIC"];
  B17 [label="B17: 71: int find_student(Student arr[], int n, const char *name) {"];
  B18 [label="B18: 72: for (int i = 0; i < n; i++) {"];
  B19 [label="B19: 73: if (strcmp(arr[i].name, name) == 0) return i;"];
  B20 [label="B20: 75: return -1;"];
  B21 [label="B21: EXIT"];
  B22 [label="B22: 78: int main(void) {\n79: Student cls[MAX_STUDENTS];\n80: int n;\n81: printf(\"Enter number of students (<= %d): \", MAX_STUDENTS);"];
  B23 [label="B23: 82: if (scanf(\"%d\", &n) != 1 || n <= 0 || n > MAX_STUDENTS) {\n83: printf(\"Invalid n\n\");\n84: return 0;"];
  B24 [label="B24: BASIC"];
  B25 [label="B25: 87: for (int i = 0; i < n; i++) {\n88: printf(\"Name and three marks for student %d:\n\", i+1);"];
  B26 [label="B26: 89: if (scanf(\"%31s %d %d %d\", cls[i].name, &cls[i].m1, &cls[i].m2, &cls[i].m3) != 4) {\n90: printf(\"Bad input\n\");\n91: return 0;"];
  B27 [label="B27: BASIC"];
  B28 [label="B28: 93: if (cls[i].m1 < 0) cls[i].m1 = 0;"];
  B29 [label="B29: 94: if (cls[i].m2 < 0) cls[i].m2 = 0;"];
  B30 [label="B30: 95: if (cls[i].m3 < 0) cls[i].m3 = 0;"];
  B31 [label="B31: 96: if (cls[i].m1 > 100) cls[i].m1 = 100;"];
  B32 [label="B32: 97: if (cls[i].m2 > 100) cls[i].m2 = 100;"];
  B33 [label="B33: 98: if (cls[i].m3 > 100) cls[i].m3 = 100;\n99: compute_avg_and_grade(&cls[i]);"];
  B34 [label="B34: 103: float desired;\n104: printf(\"Enter desired class average (0-100): \");"];
  B35 [label="B35: 105: if (scanf(\"%f\", &desired) == 1 && desired > 0.0f && desired <= 100.0f) {\n106: curve_class(cls, n, desired);"];
  B36 [label="B36: 109: sort_by_avg_desc(cls, n);\n111: printf(\"\n=== Class Summary (sorted by avg) ===\n\");\n112: float sum = 0.0f; int countA = 0, countF = 0;"];
  B37 [label="B37: 113: for (int i = 0; i < n; i++) {\n114: sum += cls[i].avg;"];
  B38 [label="B38: 115: if (cls[i].grade == 'A') countA++;"];
  B39 [label="B39: 116: if (cls[i].grade == 'F') countF++;\n117: printf(\"%-12s  m=(%3d,%3d,%3d)  avg=%6.2f  grade=%c\n\",\n118: cls[i].name, cls[i].m1, cls[i].m2, cls[i].m3, cls[i].avg, cls[i].grade);"];
  B40 [label="B40: 120: float class_avg = (n > 0) ? (sum / n) : 0.0f;\n121: printf(\"Class average: %.2f | A's: %d | F's: %d\n\", class_avg, countA, countF);\n124: char qname[MAX_NAME];\n125: printf(\"\nQuery by name (type END to stop):\n\");"];
  B41 [label="B41: 126: while (1) {"];
  B42 [label="B42: 127: if (scanf(\"%31s\", qname) != 1) break;"];
  B43 [label="B43: 128: if (strcmp(qname, \"END\") == 0) break;\n129: int idx = find_student(cls, n, qname);"];
  B44 [label="B44: 130: if (idx >= 0) {\n131: printf(\"Found: %s avg=%.2f grade=%c\n\", cls[idx].name, cls[idx].avg, cls[idx].grade);\n132: } else {\n133: printf(\"Student not found.\n\");"];
  B45 [label="B45: BASIC"];
  B46 [label="B46: 136: return 0;"];
  B47 [label="B47: BASIC"];
  B0 -> B1;
  B1 -> B2 [label="fallthrough"];
  B1 -> B2;
  B2 -> B3;
  B3 -> B4;
  B4 -> B5;
  B5 -> B6;
  B6 -> B7;
  B7 -> B8 [label="fallthrough"];
  B7 -> B8;
  B6 -> B9 [label="fallthrough"];
  B8 -> B9;
  B5 -> B10 [label="fallthrough"];
  B9 -> B10;
  B10 -> B11;
  B11 -> B12;
  B12 -> B13;
  B13 -> B14 [label="fallthrough"];
  B13 -> B14;
  B14 -> B12 [label="back"];
  B12 -> B15 [label="exit"];
  B15 -> B11 [label="back"];
  B11 -> B16 [label="exit"];
  B4 -> B17 [label="fallthrough"];
  B16 -> B17;
  B17 -> B18;
  B18 -> B19;
  B19 -> B20 [label="fallthrough"];
  B19 -> B20;
  B20 -> B21 [label="return"];
  B21 -> B18 [label="back"];
  B18 -> B22 [label="exit"];
  B22 -> B23;
  B23 -> B21 [label="return"];
  B23 -> B24 [label="fallthrough"];
  B21 -> B24;
  B24 -> B25;
  B25 -> B26;
  B26 -> B21 [label="return"];
  B26 -> B27 [label="fallthrough"];
  B21 -> B27;
  B27 -> B28;
  B28 -> B29;
  B29 -> B30;
  B30 -> B31;
  B31 -> B32;
  B32 -> B33;
  B33 -> B34 [label="fallthrough"];
  B33 -> B34;
  B34 -> B35;
  B35 -> B36 [label="fallthrough"];
  B35 -> B36;
  B36 -> B37;
  B37 -> B38;
  B38 -> B39;
  B39 -> B40 [label="fallthrough"];
  B39 -> B40;
  B40 -> B41;
  B41 -> B42;
  B42 -> B43;
  B43 -> B44;
  B44 -> B45 [label="fallthrough"];
  B44 -> B45;
  B43 -> B46 [label="fallthrough"];
  B45 -> B46;
  B46 -> B21 [label="return"];
  B42 -> B47 [label="fallthrough"];
  B21 -> B47;
  B47 -> B21 [label="fallthrough"];
}