digraph CFG {
  node [shape=box];
  B0 [label="B0: 1: #include <stdio.h>\n2: #include <string.h>\n4: #define MAX_STUDENTS 50\n5: #define MAX_NAME 32\n7: typedef struct {\n8: char name[MAX_NAME];\n9: int m1, m2, m3;\n10: float avg;\n11: char grade;\n14: void compute_avg_and_grade(Student *s) {\n15: s->avg = (s->m1 + s->m2 + s->m3) / 3.0f;"];
  B1 [label="B1: 16: if (s->avg >= 90.0f) {"];
  B2 [label="B2: 17: s->grade = 'A';\n18: } else if (s->avg >= 80.0f) {\n19: s->grade = 'B';\n20: } else if (s->avg >= 70.0f) {\n21: s->grade = 'C';\n22: } else if (s->avg >= 60.0f) {\n23: s->grade = 'D';\n24: } else {\n25: s->grade = 'F';"];
  B3 [label="B3: 29: void curve_class(Student arr[], int n, float target_avg) {\n32: int i;"];
  B4 [label="B4: 33: for (i = 0; i < n; i++) {"];
  B5 [label="B5: 34: float delta = target_avg - arr[i].avg;"];
  B6 [label="B6: 35: if (delta > 0.0f) {"];
  B7 [label="B7: 36: int bump = (delta > 10.0f) ? 10 : (int)(delta + 0.5f);\n38: int add1 = bump / 3;\n39: int add2 = bump / 3;\n40: int add3 = bump - add1 - add2;\n41: arr[i].m1 = arr[i].m1 + add1;\n42: arr[i].m2 = arr[i].m2 + add2;\n43: arr[i].m3 = arr[i].m3 + add3;"];
  B8 [label="B8: 45: if (arr[i].m1 > 100) arr[i].m1 = 100;"];
  B9 [label="B9: 46: if (arr[i].m2 > 100) arr[i].m2 = 100;"];
  B10 [label="B10: 47: if (arr[i].m3 > 100) arr[i].m3 = 100;\n48: compute_avg_and_grade(&arr[i]);"];
  B11 [label="B11: BASIC"];
  B12 [label="B12: BASIC"];
  B13 [label="B13: 53: void sort_by_avg_desc(Student arr[], int n) {\n55: int swapped = 1;"];
  B14 [label="B14: 56: while (swapped) {"];
  B15 [label="B15: 57: swapped = 0;"];
  B16 [label="B16: 58: for (int i = 0; i < n - 1; i++) {"];
  B17 [label="B17: BASIC"];
  B18 [label="B18: 59: if (arr[i].avg < arr[i+1].avg) {"];
  B19 [label="B19: 60: Student tmp = arr[i];\n61: arr[i] = arr[i+1];\n62: arr[i+1] = tmp;\n63: swapped = 1;"];
  B20 [label="B20: BASIC"];
  B21 [label="B21: BASIC"];
  B22 [label="B22: BASIC"];
  B23 [label="B23: 69: int find_student(Student arr[], int n, const char *name) {"];
  B24 [label="B24: 70: for (int i = 0; i < n; i++) {"];
  B25 [label="B25: BASIC"];
  B26 [label="B26: 71: if (strcmp(arr[i].name, name) == 0) return i;"];
  B27 [label="B27: 73: return -1;"];
  B28 [label="B28: EXIT"];
  B29 [label="B29: 76: int main(void) {\n77: Student cls[MAX_STUDENTS];\n78: int n;\n79: printf(\"Enter number of students (<= %d): \", MAX_STUDENTS);"];
  B30 [label="B30: 80: if (scanf(\"%d\", &n) != 1 || n <= 0 || n > MAX_STUDENTS) {"];
  B31 [label="B31: 81: printf(\"Invalid n\n\");\n82: return 0;"];
  B32 [label="B32: BASIC"];
  B33 [label="B33: 85: for (int i = 0; i < n; i++) {"];
  B34 [label="B34: 86: printf(\"Name and three marks for student %d:\n\", i+1);"];
  B35 [label="B35: 87: if (scanf(\"%31s %d %d %d\", cls[i].name, &cls[i].m1, &cls[i].m2, &cls[i].m3) != 4) {"];
  B36 [label="B36: 88: printf(\"Bad input\n\");\n89: return 0;"];
  B37 [label="B37: BASIC"];
  B38 [label="B38: 91: if (cls[i].m1 < 0) cls[i].m1 = 0;"];
  B39 [label="B39: 92: if (cls[i].m2 < 0) cls[i].m2 = 0;"];
  B40 [label="B40: 93: if (cls[i].m3 < 0) cls[i].m3 = 0;"];
  B41 [label="B41: 94: if (cls[i].m1 > 100) cls[i].m1 = 100;"];
  B42 [label="B42: 95: if (cls[i].m2 > 100) cls[i].m2 = 100;"];
  B43 [label="B43: 96: if (cls[i].m3 > 100) cls[i].m3 = 100;\n97: compute_avg_and_grade(&cls[i]);"];
  B44 [label="B44: 101: float desired;\n102: printf(\"Enter desired class average (0-100): \");"];
  B45 [label="B45: 103: if (scanf(\"%f\", &desired) == 1 && desired > 0.0f && desired <= 100.0f) {"];
  B46 [label="B46: 104: curve_class(cls, n, desired);"];
  B47 [label="B47: 107: sort_by_avg_desc(cls, n);\n109: printf(\"\n=== Class Summary (sorted by avg) ===\n\");\n110: float sum = 0.0f; int countA = 0, countF = 0;"];
  B48 [label="B48: 111: for (int i = 0; i < n; i++) {"];
  B49 [label="B49: 112: sum += cls[i].avg;"];
  B50 [label="B50: 113: if (cls[i].grade == 'A') countA++;"];
  B51 [label="B51: 114: if (cls[i].grade == 'F') countF++;\n115: printf(\"%-12s  m=(%3d,%3d,%3d)  avg=%6.2f  grade=%c\n\",\n116: cls[i].name, cls[i].m1, cls[i].m2, cls[i].m3, cls[i].avg, cls[i].grade);"];
  B52 [label="B52: 118: float class_avg = (n > 0) ? (sum / n) : 0.0f;\n119: printf(\"Class average: %.2f | A's: %d | F's: %d\n\", class_avg, countA, countF);\n122: char qname[MAX_NAME];\n123: printf(\"\nQuery by name (type END to stop):\n\");"];
  B53 [label="B53: 124: while (1) {"];
  B54 [label="B54: BASIC"];
  B55 [label="B55: 125: if (scanf(\"%31s\", qname) != 1) break;"];
  B56 [label="B56: 126: if (strcmp(qname, \"END\") == 0) break;\n127: int idx = find_student(cls, n, qname);"];
  B57 [label="B57: 128: if (idx >= 0) {"];
  B58 [label="B58: 129: printf(\"Found: %s avg=%.2f grade=%c\n\", cls[idx].name, cls[idx].avg, cls[idx].grade);\n130: } else {\n131: printf(\"Student not found.\n\");"];
  B59 [label="B59: BASIC"];
  B60 [label="B60: 134: return 0;"];
  B61 [label="B61: BASIC"];
  B0 -> B1;
  B1 -> B2 [label="true"];
  B2 -> B3;
  B1 -> B3 [label="false"];
  B3 -> B4;
  B4 -> B5 [label="true"];
  B5 -> B6;
  B6 -> B7 [label="true"];
  B7 -> B8;
  B8 -> B9;
  B9 -> B10;
  B10 -> B11;
  B10 -> B11 [label="false"];
  B11 -> B12;
  B9 -> B12 [label="false"];
  B12 -> B13;
  B8 -> B13 [label="false"];
  B13 -> B14;
  B14 -> B15 [label="true"];
  B15 -> B16;
  B16 -> B17 [label="true"];
  B17 -> B18;
  B18 -> B19 [label="true"];
  B19 -> B20;
  B18 -> B20 [label="false"];
  B20 -> B16 [label="back"];
  B16 -> B21 [label="false"];
  B21 -> B14 [label="back"];
  B14 -> B22 [label="false"];
  B22 -> B23;
  B6 -> B23 [label="false"];
  B23 -> B24;
  B24 -> B25 [label="true"];
  B25 -> B26;
  B26 -> B27;
  B26 -> B27 [label="false"];
  B27 -> B28 [label="return"];
  B28 -> B24 [label="back"];
  B24 -> B29 [label="false"];
  B29 -> B30;
  B30 -> B31 [label="true"];
  B31 -> B28 [label="return"];
  B28 -> B32;
  B30 -> B32 [label="false"];
  B32 -> B33;
  B33 -> B34 [label="true"];
  B34 -> B35;
  B35 -> B36 [label="true"];
  B36 -> B28 [label="return"];
  B28 -> B37;
  B35 -> B37 [label="false"];
  B37 -> B38;
  B38 -> B39;
  B39 -> B40;
  B40 -> B41;
  B41 -> B42;
  B42 -> B43;
  B43 -> B44;
  B43 -> B44 [label="false"];
  B44 -> B45;
  B45 -> B46 [label="true"];
  B46 -> B47;
  B45 -> B47 [label="false"];
  B47 -> B48;
  B48 -> B49 [label="true"];
  B49 -> B50;
  B50 -> B51;
  B51 -> B52;
  B51 -> B52 [label="false"];
  B52 -> B53;
  B53 -> B54 [label="true"];
  B54 -> B55;
  B55 -> B56;
  B56 -> B57;
  B57 -> B58 [label="true"];
  B58 -> B59;
  B57 -> B59 [label="false"];
  B59 -> B60;
  B56 -> B60 [label="false"];
  B60 -> B28 [label="return"];
  B28 -> B61;
  B55 -> B61 [label="false"];
  B61 -> B28;
}